定义：
有n个变量，m个二元组（u,v），分别表示变量u小于v，求最后的排序结果。（当然这里二元组的关系可以有多种解释，有时候可以理解为先后顺序，即一个大任务分解成若干个小任务，必须先完成一些小任务后才能完成一个任务）
分析：
把每个变量看成一个点，二元组的关系看成有向边，这样就能得到一个有向图。这样，我们的任务实际上是把一个图的所有结点排序，使得每一个有向边(u,v)对应的u都排在v的前面。当然图中不可以出现环。
实现方法：
1、选择有向图中一个没有前驱的结点并输出，即该结点的入度为1
2、在有向图中删除该点，即删除该点出发的所有边
3、重复上述两步，直到输出所有点

//hdu1285 有n个队伍比赛，m条比赛结果，即a赢b，求最后的排名。
#define N 520
int n,g[N][N];
int ru[N],vis[N],res[N];
//res记录排序后的结果,ru数组记录各个点的入度之和，vis数组记录该点是否被访问

void Top_sort()
{
	int i,j,k;
	memset(ru,0,sizeof(ru));
	memset(vis,0,sizeof(vis));
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
			if(g[i][j]==1)
				ru[j]++;
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			if(!vis[j] && ru[j]==0)
			{
				res[i]=j;
				vis[j]=1;
				//更新，把从j出发的边去掉，即相应的入度减一
				for(k=1;k<=n;k++)
					if(g[j][k]==1)
						ru[k]--;
				break;
			}
		}
//		if(j-1 == n)	//如果成立则表示有环存在，看题目要求处理
//			return ;
	}
	for(i=1;i<=n;i++)
	{
		if(i!=1)
			printf(" ");
		printf("%d",res[i]);
	}
	printf("\n");
}

int main()
{
	int m,a,b;
	while(scanf("%d%d",&n,&m)!=EOF)
	{
		memset(g,0,sizeof(g));
		while(m--)
		{
			scanf("%d%d",&a,&b);
			g[a][b]=1;
		}
		Top_sort();
	}
	return 0;
}

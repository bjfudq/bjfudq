欧拉函数定义：
对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。

#define N 1000000
LL prime[N];//存素数
bool f[N];
LL Ou[N+2];//存欧拉函数
void fun()
{
	// //打素数表和欧拉函数表，前N个
	__int64 i,j,pNum=0;
	memset(f,false,sizeof(f));
	Ou[1]=1;
	for(i=2;i<=N;i++)
	{
		if(!f[i])
		{
			prime[pNum++]=i;
			Ou[i]=i-1;
		}
		for(j=0;j<pNum && prime[j]*i<=N;j++)
		{
			f[prime[j]*i]=true;
			if(i%prime[j]==0)
			{
				Ou[i*prime[j]]=Ou[i]*prime[j];
				break;
			}
			else
				Ou[i*prime[j]]=Ou[i]*(prime[j]-1);
		}
	}
}

void fun()
{
	//下面求的素数表和欧拉函数表，是根据欧拉函数定义来求解，上面部分是经过改进后的求法（效率较高）
	LL i,j,pNum=0;
	memset(f,true,sizeof(f));
	f[0]=f[1]=false;
	for(i=2;i*i<=N;i++)
		if(f[i])
			for(j=i*i;j<=N;j+=i)
				f[j]=false;
	for(i=1;i<=N;i++)
		Ou[i]=i;
	for(i=2;i<=N;i++)
		if(f[i])
		{
			prime[pNum++]=i;//如果不需要素数表，可以把这步省去
			for(j=i;j<=N;j+=i)//根据欧拉函数的定义来更新
				Ou[j]=Ou[j]/i*(i-1);
		}	
}


//递推求欧拉函数值
#define N 1000000
int phi[N+10];

void init()
{
	int i,j;
	for(i=1;i<=N;i++)
		phi[i]=i;
	for(i=2;i<=N;i+=2)
		phi[i]/=2;
	for(i=3;i<=N;i+=2)
		if(phi[i]==i)
		{
			for(j=i;j<=N;j+=i)
				phi[j]=phi[j]/i*(i-1);
		}
}

//求单个值的欧拉函数值
int Getphi(int n)
{
	int i,phi;
	for(i=2,phi=n;i*i<=n;i++)
	{
		if(n%i == 0)
		{
			phi=phi/i*(i-1);
			while(n%i == 0)
				n/=i;
		}
	}
	if(n > 1)
		phi=phi/n*(n-1);
	return phi;
}
【稳定婚姻问题】
    问题来自于一场“3分钟相亲”活动，参加活动的有n位男士和n位女士。要求每位男士都要和所有的女士进行短暂的单独交流，并为她们打分，然后按照喜欢程度，对每一位女士进行排序；同样的，每位女士也要对所有男士进行打分和排序。
    作为活动的组织者，当你拿到这些数据后，该如何为男，女士们配对，才能使大家皆大欢喜，组成稳定的婚姻呢？即：满足“除妻子（丈夫）外，我爱的人不爱我，爱我的人我不爱”条件。

    1962 年，美国数学家 David Gale 和 Lloyd Shapley 发明了一种寻找稳定婚姻的策略，人们称之为延迟认可算法（Gale-Shapley算法）。
    先对所有男士进行落选标记，称其为自由男。当存在自由男时，进行以下操作：
    ① 每一位自由男在所有尚未拒绝她的女士中选择一位被他排名最优先的女士；
    ② 每一位女士将正在追求她的自由男与其当前男友进行比较，选择其中排名优先的男士作为其男友，即若自由男优于当前男友，则抛弃前男友；否则保留其男友，拒绝自由男。
    ③ 若某男士被其女友抛弃，重新变成自由男。

    在算法执行期间，自由男们主动出击，依次对最喜欢和次喜欢的女人求爱，一旦被接受，即失去自由身，进入订婚状态；而女人们则采取“守株待兔”和“喜新厌旧”策略，对前来求爱的男士进行选择：若该男子比未婚夫强，则悔婚，选择新的未婚夫；否则拒绝该男子的求婚。被女友抛弃的男人重获自由身，重新拥有了追求女人的权利――当然，新的追求对象比不过前女友。
    这样，在算法执行期间，每个人都有可能订婚多次――也有可能一开始就找到了自己的最爱，从一而终――每订一次婚，女人们的选择就会更有利，而男人们的品味则越来越差。只要男女生的数量相等，则经过多轮求婚，订婚，悔婚和再订婚之后，每位男女最终都会找到合适的伴侣――虽然不一定是自己的最爱（男人没能追到自己的最爱，或女人没有等到自己的最爱来追求），但绝对不会出现“虽然彼此相爱，却不能在一起”的悲剧，所有人都会组成稳定的婚姻。

代码如下：

int libMan[N][N],libLady[N][N+1];	//男士和女士所喜欢的异性序号排列表
int n,man[N+1],lady[N];

bool ChangeFriend(int v,int oldF,int newF)	//判断是否需要换男友
{
	for(int i=0;i<=n;i++)
	{
		if(libLady[v][i] == oldF)
		{
			oldF=i;
			break;
		}
	}
	for(int i=0;i<=n;i++)
	{
		if(libLady[v][i] == newF)
		{
			newF=i;
			break;
		}
	}
	return oldF > newF;
}

void Gale_Shapley()
{
	memset(man,0,sizeof(man));
	for(int i=0;i<n;i++)
		lady[i]=n;
	int i=0;
	while(i < n)	//第一个男士开始选
	{
		int v=libMan[i][man[i]];	//第i个男士喜欢第v个女士
		if(i == lady[v])	//i号男就是v号女当前男友，跳过
			i++;
		else if(ChangeFriend(v,lady[v],i))	//如果i号男比v号女当前男友优秀，则v抛弃前男友，重新选择
		{
			int t=lady[v];	//t存储前男友序号
			man[lady[v]]++;		//抛弃前男友，前男友选择其“次喜欢女”
			lady[v]=i;		//选择i号男为新男友
			if(t > i)	//前男友t在新男友i之后，则处理下一个男士
				i++;
			else	//否则先处理前男友t
				i=t;
		}
		else	//继续处理i号男的“次喜欢女”
			man[i]++;
	}
}

void work()
{
	//输出每位男士追求女士的次数
	for(int i=0;i<n;i++)
		printf("%d ",man[i]+1);
	printf("\n");

	//输出每位男士的妻子序号
	for(int i=0;i<n;i++)
		printf("%d ",libMan[i][man[i]]);
	printf("\n");

	//输出每位女士的丈夫序号
	for(int i=0;i<n;i++)
		printf("%d ",lady[i]);
	printf("\n");
}
给定由n个整数（包含负整数）组成的序列a1,a2,...,an，求该序列子段和的最大值。
例如有这么一个序列：-2 11 -4 13 -25 21 ，最大子段和为21。

解法：
建立一个f数组，f[i]表示以a[i]为末项的最大子段和，0<=k<=i，如果前i-1项的最大子段和大于0，则加上a[i]；否则f[i]=a[i]。最后从f数组里求得最大值
状态转移方程：
f[i]=f[i-1]+a[i];   f[i-1]>0
f[i]=a[i];  否则


#define N 1010
#define M INT_MIN
int f[N],a[N];//f[i]表示以a[i]为末项的最大子段和，0<=k<=i
//如果前i-1项的最大子段和大于0，则f[i]=f[i-1]+a[i]；否则f[i]=a[i]
int LSS_DP(int n,int a[])
{
	int i,res=M;
	f[0]=a[0];
	for(i=1;i<n;i++)
	{
		if(f[i-1]>0)
			f[i]=f[i-1]+a[i];
		else
			f[i]=a[i];
		if(f[i]>res)
			res=f[i];
	}
	return res;
}
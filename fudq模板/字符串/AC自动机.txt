//hdu 2222

const int N=55;
const int M=1000010;
#define BASE 'a'

char key[N],str[M];
const int kind = 26;
struct node
{
	node *fail; //失败指针
	node *next[kind]; //Tire每个节点的26个子节点（最多26个字母）
	int num; //是否为该单词的最后一个节点
	node()
	{ //构造函数初始化
		fail = NULL;
		num = 0;
		for(int i=0;i<kind;i++)
			next[i]=NULL;
	}
}*q[500001],*root; //队列，方便用于bfs构造失败指针

void insert(char *str, node *root)
{
	node *p = root;
	int i = 0, index;
	while (str[i])
	{
		index = str[i] - BASE;
		if (p->next[index] == NULL)
			p->next[index] = new node();
		p = p->next[index];
		i++;
	}
	p->num++;
}

void build_ac_automation(node *root)
{
	int i;
	int head, tail; //队列的头尾指针
	head = tail = 0;
	root->fail = NULL;
	q[head++] = root;
	while (head != tail)
	{
		node *temp = q[tail++];
		node *p = NULL;
		for (i = 0; i < kind; i++)
		{
			if (temp->next[i] != NULL)
			{
				p = temp->fail;
				while (p != NULL && p->next[i] == NULL)
					p = p->fail;
				if (p == NULL)
					temp->next[i]->fail = root;
				else
					temp->next[i]->fail = p->next[i];
				q[head++] = temp->next[i];
			}
		}
	}
}

int query(node *root, char* str)
{
	int i = 0, cnt = 0, index;
	node *p = root;
	while (str[i])
	{
		index = str[i] - BASE;
		while (p->next[index] == NULL && p != root)
			p = p->fail;
		p = p->next[index];
		p = (p == NULL) ? root : p;
		node *temp = p;
		while (temp != root && temp->num != -1)
		{
			cnt += temp->num;
			temp->num = -1;//若每个单词可以匹配多次则去掉
			temp = temp->fail;
		}
		i++;
	}
	return cnt;
}

int main()
{
    int T,n;
    scanf("%d",&T);
    while(T--)
    {
    	scanf("%d",&n);
    	//node *root;
    	root=new node();
    	while(n--)
    	{
    		scanf("%s",key);
    		insert(key,root);
    	}
    	scanf("%s",str);
    	build_ac_automation(root);
    	printf("%d\n",query(root,str));
    }
    return 0;
}
【后缀数组】
后缀数组是将所有后缀子串按从小到大顺序排列。
关于后缀数组的三个数组：sa[i]，ranks[i]，height[i]。
sa[i]表示排第i的后缀首字母在原字符串中位置sa[i]；
rank[i]表示首字母在原字符串中位置为i的后缀排第rank[i]（与sa[i]相对），第一的rank[]值为1，不为0；
height[i]表示排第i的后缀与前一个后缀的最长公共前缀长度，height[]从1开始有值，[1,n)。
求后缀数组常见有两种算法，倍增算法（O(nlogn)）；DC3算法（O(n)）。

应用和题目：
http://dongxicheng.org/structure/suffix-array/
1.求一个字符串的最长重复子串，可以重叠，这是最简单的后缀数组应用了，直接求height数组中的最大值。
2.两个字符串的最长公共子串，利用height数组，poj2774。
3.求一个字符串的最长重复子串，要求这两个子串不重叠，用到二分，poj1743.
4.一个字符串的最长回文，poj3794,方法是将字符串反转然后连在其后面，中间用一个未出现的符号隔开，形如str$reverse(str)#,写出模板后，利用height数组，判断是否是来自这两个字符串。
hdu 3518 求字符串中出现两次及以上且不交叉的字符串个数
bjfu 1045 求一个字符串不相同子串的个数


char s[N];
int n, sa[4*N], rank[N], height[N];
int buf[4*N], ct[N], sx[N], sax[N];

inline bool leq(int a, int b, int x, int y)
{
    return (a < x || a == x && b <= y);
}
inline bool leq(int a, int b, int c, int x, int y, int z)
{
    return (a < x || a == x && leq(b, c, y, z));
}
inline int geti(int t, int nx, int sa[])
{
	return (sa[t]<nx ? sa[t]*3+1 : (sa[t]-nx)*3+2);
}

static void radix(int a[], int b[], int s[], int n, int k)
{
    int i, t, sum;
    memset(ct, 0, (k + 1) * sizeof(int));
    for (i = 0; i < n; ++i) ct[s[a[i]]]++;
    for (i = 0, sum = 0; i <= k; ++i)
    {
        t = ct[i]; ct[i] = sum; sum += t;
    }
    for (i = 0; i < n; i++) b[ct[s[a[i]]]++] = a[i];
}

void suffix(int s[], int sa[], int n, int k)
{
    int i, j, e, p, t;
    int name = 0, cx = -1, cy = -1, cz = -1;
    int nx = (n+2)/3, ny = (n+1)/3, nz = n/3, nxz = nx+nz;
    int *syz = s + n + 3, *sayz = sa + n + 3;
    for (i=0, j=0; i < n + (nx - ny); i++)
    if (i%3 != 0) syz[j++] = i;
    radix(syz , sayz, s+2, nxz, k);
    radix(sayz, syz , s+1, nxz, k);
    radix(syz , sayz, s , nxz, k);
    for (i = 0; i < nxz; i++)
    {
        if (s[ sayz[i] ] != cx || s[ sayz[i] + 1 ] != cy ||s[ sayz[i] + 2 ] != cz)
        {
            name++; cx = s[ sayz[i] ];
            cy = s[ sayz[i] + 1 ]; cz = s[ sayz[i] + 2 ];
        }
        if (sayz[i] % 3 == 1) syz[ sayz[i] / 3 ] = name;
        else syz[ sayz[i]/3 + nx ] = name;
    }
    if (name < nxz)
    {
        suffix(syz, sayz, nxz, name);
        for (i = 0; i < nxz; i++) syz[sayz[i]] = i + 1;
    }
    else
    {
        for (i = 0; i < nxz; i++) sayz[syz[i] - 1] = i;
    }
    for (i = j = 0; i < nxz; i++)
    if (sayz[i] < nx) sx[j++] = 3 * sayz[i];
    radix(sx, sax, s, nx, k);
    for (p=0, t=nx-ny, e=0; e < n; e++)
    {
        i = geti(t, nx, sayz); j = sax[p];
        if ( sayz[t] < nx ?leq(s[i], syz[sayz[t]+nx], s[j], syz[j/3]) :
            leq(s[i], s[i+1], syz[sayz[t]-nx+1],
        s[j], s[j+1], syz[j/3+nx]) )
        {
            sa[e] = i;
            if (++t == nxz)
            {
                for (e++; p < nx; p++, e++)
                sa[e] = sax[p];
            }
        }
        else
        {
            sa[e] = j;
            if (++p == nx) for (++e; t < nxz; ++t, ++e)
            sa[e] = geti(t, nx, sayz);
        }
    }
}

void makesa()
{
    memset(buf, 0, 4 * n * sizeof(int));
    memset(sa, 0, 4 * n * sizeof(int));
    for (int i=0; i<n; ++i) buf[i] = s[i] & 0xff;
    suffix(buf, sa, n, 255);
}

void lcp()
{
    int i, j, k;
    for (j = rank[height[i=k=0]=0]; i < n - 1; i++, k++)
        while (k >= 0 && s[i] != s[ sa[j-1] + k ])
            height[j] = (k--), j = rank[ sa[j] + 1 ];
}

void Rank()
{
	for(int i=1;i<n;i++)
		rank[sa[i]]=i;
}

int main()
{
    while(scanf("%s",s)!=EOF)
    {
    	n=(int)strlen(s)+1;
    	makesa();
    	Rank();
    	lcp();
    	
    	//……
    }
    return 0;
}
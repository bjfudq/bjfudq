#include <stdio.h>

int ans,a[100] = { 0 };

void shuchu(int m) {
	int i;
	printf("%d",a[0]);
	for (i = 1; i <= m - 1; i++)
		printf("+%d", a[i]);
	printf("\n");
}
//递归打印每个数
void fenjie(int n, int m) {
	int i;
	if (n == 0)
	{
		ans++;
		shuchu(m);
	}
	else
		for (i = n; i >= 1; i--)
			if (m == 0 || i <= a[m - 1]) {
				a[m] = i;
				fenjie(n - i, m + 1);
			}
}

int main()
{
	int n, m = 0;
	//printf("please input a number(0<n<100): ");
	while(scanf("%d", &n)!=EOF)
	{
		ans=0;
		fenjie(n, m);
		printf("total num: %d\n\n",ans);
	}
	return 0;
}

//递归求总个数
int q(int n,int m)
{
    if(n<1||m<1)
        return 0;
    if(n==1||m==1)
        return 1;
    if(n<m)
        return q(n,n);
    if(n==m)
        return q(n,m-1)+1;
    return q(n,m-1)+q(n-m,m);
}

通项公式：
p(k)=sigma(p(k-i*(3*i-1)/2)+p(k-i*(3*i+1)/2))*(-1)^(i+1);

p(k)=p(k-1)+p(k-2)-p(k-5)-p(k-7)+p(k-12)+p(k-15)-p(k-22)-p(k-26)+……
+(1, 2), -(5,7), +(12,15), -(22,26)……
1，5，12，22满足公式n*(3*n-1)/2。
由五边形原理推得：
五边形定理，分割函数，把数n拆成几个数（小于等于n）相加的形式拆法
(1-x)(1-x^2)(1-x^3).... = 1-x-x^2+x^5+x^7-x^12-x^15+x^22+x^26+......
维基上有详细说明http://en.wikipedia.org/wiki/Partition_(number_theory)

把数n拆成几个数相加的形式，一共有2^(n-1)种
如果n=4，有
4=1+1+1+1
4=1+1+2
4=1+2+1
4=2+1+1
4=1+3
4=2+2
4=3+1
4=4
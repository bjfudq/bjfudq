/*
 *      求C(n,m)%p, p为素数，适用于n和m很大的时候
 *      Lucas定理： Lucas(n,m,p)=c(n%p,m%p)*Lucas(n/p,m/p,p);
 *      把n写成p进制a[n]a[n-1]a[n-2]...a[0]，把m写成p进制b[n]b[n-1]b[n-2]...b[0]，
 *      则C(n,m)与C(a[n],b[n])*C(a[n-1],b[n-1])*C(a[n-2],b[-2])*....*C(a[0],b[0])模p同余。
 *      *注：n,m不能大于10^5，不大于情况下用逆元的方法可以解决，如果大了就不能解决。
 */

#define LL __int64
#define N 10001000
#define M 1000000007ll
LL fac[N];

void init(LL p)
{
    LL i;
    fac[0] =1;
    for(i =1; i <= p; i++)
        fac[i] = fac[i-1]*i % p;
}

LL exp_mod(LL a, LL b, LL p)
{
    LL tmp = a % p, ans =1;
    while(b)
    {
        if(b & 1)  ans = ans * tmp % p;
        tmp = tmp*tmp % p;
        b >>=1;
    }
    return  ans;
}

LL C(LL n, LL m, LL p)
{
    if(m > n)
    	return 0;
    return  fac[n]*exp_mod(fac[m]*fac[n-m], p-2, p) % p;//逆元
}

LL Lucas(LL n, LL m, LL p)
{
    if(m ==0)
    	return 1;
    return  (C(n%p, m%p, p)*Lucas(n/p, m/p, p))%p;
}

int main()
{
	int T;
	LL n,m,p;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%I64d %I64d %I64d",&n,&m,&p);
		init(p);
		printf("%I64d\n",Lucas(n,m,p));
	}
    return 0;
}
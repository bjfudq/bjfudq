#define N 100010
struct point{
	double x,y;
}p[N],res[N];
int tot,n;

bool operator < (const point &l, const point &r){
	return l.y < r.y || (l.y == r.y && l.x < r.x);
}
double dist(point a,point b){
	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
bool mult(point sp, point ep, point op){
	return (sp.x - op.x) * (ep.y - op.y) >= (ep.x - op.x) * (sp.y - op.y);
}

int graham(point pnt[], int n, point res[])
{
	int i, len, top = 1;
	sort(pnt, pnt + n);
	if (n == 0) return 0; res[0] = pnt[0];
	if (n == 1) return 1; res[1] = pnt[1];
	if (n == 2) return 2; res[2] = pnt[2];
	for (i = 2; i < n; i++)
	{
		while (top && mult(pnt[i], res[top], res[top-1]))
			top--;
		res[++top] = pnt[i];
	}
	len = top; res[++top] = pnt[n - 2];
	for (i = n - 3; i >= 0; i--)
	{
		while (top!=len && mult(pnt[i], res[top],res[top-1]))
			top--;
		res[++top] = pnt[i];
	}
	return top;
}

void solve()
{
	tot=0;
	double a,b;
	for(int i=0;i<n;i++)
	{
		scanf("%lf%lf",&a,&b);
		p[tot].x=a;
		p[tot++].y=b;
	}
	int tmp=graham(p,tot,res);
	printf("%d\n",tmp);
}
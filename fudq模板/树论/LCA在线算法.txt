struct edge{
    int u,v,w,next;
}edge[2*N];
int n,q;
int tot,e,head[N];
int vis[N],dp[2*N][M];
int ver[2*N],R[2*N],first[N],dir[N];

void init(){
    memset(head,-1,sizeof(head));
    memset(vis,0,sizeof(vis));
    num = 0;tot = 0; dir[1] = 0;
}

inline void add(int u ,int v ,int w){
    edge[e].u = u;
    edge[e].v = v;
    edge[e].w = w;
    edge[e].next = head[u];
    head[u] = e++;
}

void dfs(int u ,int dep){
    vis[u] = 1; ver[++tot] = u; first[u] = tot; R[tot] = dep;
    for(int k=head[u]; k!=-1; k=edge[k].next)
        if( !vis[edge[k].v] ){
            int v = edge[k].v , w = edge[k].w;
            dir[v] = dir[u] + w;
            dfs(v,dep+1);
            ver[++tot] = u; R[tot] = dep;
        }
}

void ST(int n){
    for(int i=1;i<=n;i++)
        dp[i][0] = i;
    for(int j=1;(1<<j)<=n;j++)
    {
        for(int i=1;i+(1<<j)-1<=n;i++)
        {
            int a = dp[i][j-1] , b = dp[i+(1<<(j-1))][j-1];
            dp[i][j] = R[a]<R[b]?a:b;
        }
    }
}

int RMQ(int l,int r)
{
    int k=0;
    while((1<<(k+1))<=r-l+1)
        k++;
    int a = dp[l][k], b = dp[r-(1<<k)+1][k];
    return R[a]<R[b]?a:b;
}

int LCA(int u ,int v)
{
    int x = first[u] , y = first[v];
    if(x > y) swap(x,y);
    int res = RMQ(x,y);
    return ver[res];
}

void solve(){
	init();
	scanf("%d%d",&n,&q);
    for(int i=1; i<n; i++)
    {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        add(u,v,w);
        add(v,u,w);
    }
    dfs(1,1);
    ST(2*n-1);
    while(q--)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        int lca = LCA(u,v);
        printf("%d\n",dir[u] + dir[v] - 2*dir[lca]);
    }
}
